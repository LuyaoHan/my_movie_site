{"ast":null,"code":"import _defineProperty from\"/home/luyao/Desktop/CS185/my_movie_site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/luyao/Desktop/CS185/my_movie_site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/luyao/Desktop/CS185/my_movie_site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/*\nCustom React Hooks\n*/import{useState}from\"react\";//react hooks generally have an internal state\n/*\nHow useForm works:\nit takes in an input callback(in GuestBook it is the function \"submit\"), for this hook to use\n\ntwo functions handleTextChange/handleSubmit and \"Values\" objects are passed back to the GuestBook\nand in GuestBook they are destructured like a struct\n\n*/var useForm=function useForm(callback){//callback: passed from GuestBook(main form) to update values\n//declare way to set values\nvar _useState=useState({guestName:\"\",description:\"\",message:\"\",isPrivate:false,email:\"\",date:\"\"}),_useState2=_slicedToArray(_useState,2),values=_useState2[0],setValues=_useState2[1];//pulling the tuple to values, and setValues is the setter function\n//new state for errors\nvar _useState3=useState({guestName:\"\",description:\"\",message:\"\",isPrivate:\"\",email:\"\",hasError:\"\"}),_useState4=_slicedToArray(_useState3,2),errors=_useState4[0],setErrors=_useState4[1];//just like declaring values and its setter setValues\nvar currYear=new Date().getFullYear();var currMonth=new Date().getMonth()+1;var currDay=new Date().getDate();//Current Date\nconsole.log(\"date is: \"+currMonth+\" \"+currDay);//declare way on change event. Once the input tab is clicked, handler function receives an event.\nvar handleTextChange=function handleTextChange(event){//DEBUG MESSAGE: grab target(of what you are typing in)\nconsole.log(event.target.name,\"value is:\"+event.target.value);setValues(_objectSpread(_objectSpread({},values),{},_defineProperty({},event.target.name,event.target.value)));};//Submission function\nvar handleSubmit=function handleSubmit(event){console.log(\"enter submit callback\");event.preventDefault();//prevent the default behavior so that the browser doesn't refresh itself\ncallback();};//returns values that will be used in GuestBook\nreturn{handleTextChange:handleTextChange,//return setter callback function\nhandleSubmit:handleSubmit,setValues:setValues,//function method\nvalues:values//return set values\n};};export default useForm;//export so that in GuestBook/other form page can destructure the returns","map":{"version":3,"sources":["/home/luyao/Desktop/CS185/my_movie_site/src/components/useForm.js"],"names":["useState","useForm","callback","guestName","description","message","isPrivate","email","date","values","setValues","hasError","errors","setErrors","currYear","Date","getFullYear","currMonth","getMonth","currDay","getDate","console","log","handleTextChange","event","target","name","value","handleSubmit","preventDefault"],"mappings":"2dAAA;;EAGA,OAAQA,QAAR,KAAuB,OAAvB,CAAgC;AAEhC;;;;;;;EAQA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,QAAD,CAAa,CAAG;AAI5B;AAJyB,cAKEF,QAAQ,CAAC,CAACG,SAAS,CAAC,EAAX,CAAcC,WAAW,CAAC,EAA1B,CAA6BC,OAAO,CAAC,EAArC,CAAwCC,SAAS,CAAC,KAAlD,CAAwDC,KAAK,CAAC,EAA9D,CAAiEC,IAAI,CAAC,EAAtE,CAAD,CALV,wCAKlBC,MALkB,eAKXC,SALW,eAKsF;AAC/G;AANyB,eAOEV,QAAQ,CAAC,CAACG,SAAS,CAAC,EAAX,CAAcC,WAAW,CAAC,EAA1B,CAA6BC,OAAO,CAAC,EAArC,CAAwCC,SAAS,CAAC,EAAlD,CAAqDC,KAAK,CAAC,EAA3D,CAA8DI,QAAQ,CAAC,EAAvE,CAAD,CAPV,yCAOlBC,MAPkB,eAOXC,SAPW,eAOwF;AACjH,GAAIC,CAAAA,QAAQ,CAAI,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAAhB,CACA,GAAIC,CAAAA,SAAS,CAAI,GAAIF,CAAAA,IAAJ,GAAWG,QAAX,GAAsB,CAAvC,CACA,GAAIC,CAAAA,OAAO,CAAI,GAAIJ,CAAAA,IAAJ,GAAWK,OAAX,EAAf,CAAuC;AACvCC,OAAO,CAACC,GAAR,CAAY,YAAcL,SAAd,CAA0B,GAA1B,CAAgCE,OAA5C,EACA;AACA,GAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,KAAK,CAAG,CAC7B;AACAH,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,MAAN,CAAaC,IAAzB,CAA8B,YAAcF,KAAK,CAACC,MAAN,CAAaE,KAAzD,EAEAjB,SAAS,gCACJD,MADI,wBAENe,KAAK,CAACC,MAAN,CAAaC,IAFP,CAEcF,KAAK,CAACC,MAAN,CAAaE,KAF3B,GAAT,CAID,CARH,CAYE;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAJ,KAAK,CAAG,CAC3BH,OAAO,CAACC,GAAR,CAAY,uBAAZ,EACAE,KAAK,CAACK,cAAN,GAAwB;AAChB3B,QAAQ,GACf,CAJH,CAMA;AACA,MAAM,CACAqB,gBAAgB,CAAhBA,gBADA,CACwB;AACxBK,YAAY,CAAZA,YAFA,CAGAlB,SAAS,CAATA,SAHA,CAGsB;AACtBD,MAAM,CAANA,MAAqB;AAJrB,CAAN,CAML,CAvCD,CAyCA,cAAeR,CAAAA,OAAf,CAAwB","sourcesContent":["/*\nCustom React Hooks\n*/\nimport {useState} from \"react\"; //react hooks generally have an internal state\n\n/*\nHow useForm works:\nit takes in an input callback(in GuestBook it is the function \"submit\"), for this hook to use\n\ntwo functions handleTextChange/handleSubmit and \"Values\" objects are passed back to the GuestBook\nand in GuestBook they are destructured like a struct\n\n*/\nconst useForm = (callback) =>{  //callback: passed from GuestBook(main form) to update values\n                                              \n    \n    \n    //declare way to set values\n    const [values,setValues] = useState({guestName:\"\",description:\"\",message:\"\",isPrivate:false,email:\"\",date:\"\"}) //pulling the tuple to values, and setValues is the setter function\n    //new state for errors\n    const [errors,setErrors] = useState({guestName:\"\",description:\"\",message:\"\",isPrivate:\"\",email:\"\",hasError:\"\"}); //just like declaring values and its setter setValues\n    var currYear = (new Date().getFullYear());\n    var currMonth = (new Date().getMonth()+1);\n    var currDay = (new Date().getDate());  //Current Date\n    console.log(\"date is: \" + currMonth + \" \" + currDay)\n    //declare way on change event. Once the input tab is clicked, handler function receives an event.\n    const handleTextChange = event =>{\n        //DEBUG MESSAGE: grab target(of what you are typing in)\n        console.log(event.target.name,\"value is:\" + event.target.value)\n   \n        setValues({\n          ...values,         //'...' is the spread operator that iterate through objects declared in \"values\"\n          [event.target.name]: event.target.value, //set name equal to the key\n          });\n      };\n       \n\n\n      //Submission function\n      const handleSubmit = event =>{  \n        console.log(\"enter submit callback\")\n        event.preventDefault(); //prevent the default behavior so that the browser doesn't refresh itself\n                callback();            \n        }\n\n      //returns values that will be used in GuestBook\n      return{\n            handleTextChange,       //return setter callback function\n            handleSubmit,\n            setValues,            //function method\n            values,              //return set values\n      }\n};\n\nexport default useForm; //export so that in GuestBook/other form page can destructure the returns"]},"metadata":{},"sourceType":"module"}